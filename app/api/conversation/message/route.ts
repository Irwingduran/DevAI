import { type NextRequest, NextResponse } from "next/server"
import { conversationDb } from "@/lib/services/conversation-service"
import { getOrCreateAnonymousUser } from "@/lib/utils/anonymous-user"

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { conversationId, content, role = "user", metadata } = body

    if (!content || !role) {
      return NextResponse.json({ error: "Content and role are required" }, { status: 400 })
    }

    let targetConversationId = conversationId

    // If no conversation ID provided, create a new conversation
    if (!targetConversationId) {
      // Check if user is authenticated (you'll need to implement your auth logic)
      const userId = null // Replace with actual user ID from session/JWT

      let anonymousId: string | undefined
      if (!userId) {
        anonymousId = await getOrCreateAnonymousUser()
      }

      const conversation = await conversationDb.createConversation({
        userId,
        anonymousId,
        title: content.slice(0, 50) + (content.length > 50 ? "..." : ""),
      })

      targetConversationId = conversation.id
    }

    // Create the message
    const message = await conversationDb.createMessage({
      conversationId: targetConversationId,
      role,
      content,
      metadata,
    })

    // Here you would typically call your AI service to generate a response
    // For now, we'll create a mock AI response
    if (role === "user") {
      const aiResponse = await conversationDb.createMessage({
        conversationId: targetConversationId,
        role: "assistant",
        content: `I understand you're asking about: "${content}". This is a mock AI response. In a real implementation, this would be generated by your AI service.`,
        metadata: { model: "mock-ai-v1" },
      })

      return NextResponse.json({
        success: true,
        conversationId: targetConversationId,
        userMessage: message,
        aiResponse,
      })
    }

    return NextResponse.json({
      success: true,
      conversationId: targetConversationId,
      message,
    })
  } catch (error) {
    console.error("Error creating message:", error)
    return NextResponse.json({ error: "Failed to create message" }, { status: 500 })
  }
}
